package {{ root_package }}.{{ package }}.service;

import {{ root_package }}.helper.exception.ItemNotFoundException;
{%- for entity in entities %}
import {{ root_package }}.{{ package }}.dto.{{ entity.table }}DTO;
import {{ root_package }}.{{ package }}.model.{{ entity.table }}Entity;
import {{ root_package }}.{{ package }}.model.{{ entity.table }}Repository;
{% endfor %}
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

{%- if hasList %}
import java.util.ArrayList;
import java.util.List;
{% endif -%}
import java.util.NoSuchElementException;

@Service
@Transactional
@RequiredArgsConstructor
public class {{ service }}Service {

    private static final Logger LOGGER = LoggerFactory.getLogger({{ service }}Service.class);

    {% for entity in entities -%}
    private final {{ entity.table }}Repository {{ entity.table|lower }}Repository;
    {%- endfor %}

    {% for entity in entities -%}
    {% for op in entity.ops -%}
    {% if op.verb == "GET" and op.type == "SIMPLE" -%}
    public {{ entity.table }}DTO get{{ entity.table }}(String id) {
        {{ entity.table }}DTO {{ entity.table|lower }}DTO = new {{ entity.table }}DTO();
        try {
            {{ entity.table }}Entity {{ entity.table|lower }}Entity = {{ entity.table|lower }}Repository.findById(id).orElseThrow();
            BeanUtils.copyProperties({{ entity.table|lower }}Entity, {{ entity.table|lower }}DTO);
            return {{ entity.table|lower }}DTO;
        } catch (NoSuchElementException ex) {
            LOGGER.info(String.format("{{ entity.table }} with id: %s not found.", id));
            throw new ItemNotFoundException(String.format("{{ entity.table }} with id: %s not found.", id));
        }
    }
    {% endif -%}
    {% if op.verb == "GET" and op.type == "ALL" %}
    public List<{{ entity.table }}DTO> getAll{{ entity.table }}() {
        List<{{ entity.table }}DTO> list{{ entity.table }}DTO = new ArrayList<>();
        Iterable<{{ entity.table }}Entity> it{{ entity.table }}Entity = {{ entity.table|lower }}Repository.findAll();
        for ({{ entity.table }}Entity {{ entity.table|lower }}Entity : it{{ entity.table }}Entity) {
            {{ entity.table }}DTO {{ entity.table|lower }}DTO = new {{ entity.table }}DTO();
            BeanUtils.copyProperties({{ entity.table|lower }}Entity, {{ entity.table|lower }}DTO);
            list{{ entity.table }}DTO.add({{ entity.table|lower }}DTO);
        }
        return list{{ entity.table }}DTO;
    }
    {%- endif %}
    {%- endfor %}
    {%- endfor %}
}
