package {{ root_package }}.{{ package }}.service;

import {{ root_package }}.helper.exception.ItemNotFoundException;
{%- for entity in entities %}
import {{ root_package }}.{{ package }}.dto.{{ entity.entity }}DTO;
import {{ root_package }}.{{ package }}.model.{{ entity.entity }}Entity;
import {{ root_package }}.{{ package }}.model.{{ entity.entity }}Repository;
{% endfor %}
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

import java.util.NoSuchElementException;

@Service
@Transactional
@RequiredArgsConstructor
public class {{ service }}Service {

    private static final Logger LOGGER = LoggerFactory.getLogger({{ service }}Service.class);

    {% for entity in entities %}
    private final {{ entity.entity }}Repository {{ entity.entity_var }}Repository;
    {%- endfor %}

    {% for entity in entities -%}
    {% for op in entity.ops -%}
    {% if op.verb == "GET" and op.type == "SIMPLE" %}
    public {{ entity.entity }}DTO get{{ entity.entity }}(String id) {
        try {
            {{ entity.entity }}Entity {{ entity.entity_var }}Entity = {{ entity.entity_var }}Repository.findById(id).orElseThrow();
            {{ entity.entity }}DTO {{ entity.entity_var }}DTO = new {{ entity.entity }}DTO();
            BeanUtils.copyProperties({{ entity.entity_var }}Entity, {{ entity.entity_var }}DTO);
            return {{ entity.entity_var }}DTO;
        } catch (NoSuchElementException ex) {
            LOGGER.info("{{ entity.entity }} with id: {} not found.", id);
            throw new ItemNotFoundException(String.format("{{ entity.entity }} with id: %s not found.", id));
        }
    }
    {% endif -%}
    {% if op.verb == "GET" and op.type == "ALL" -%}
    public List<{{ entity.entity }}DTO> getAll{{ entity.entity }}() {
        List<{{ entity.entity }}DTO> list{{ entity.entity }}DTO = new ArrayList<>();
        Iterable<{{ entity.entity }}Entity> it{{ entity.entity }}Entity = {{ entity.entity_var }}Repository.findAll();
        for ({{ entity.entity }}Entity {{ entity.entity_var }}Entity : it{{ entity.entity }}Entity) {
            {{ entity.entity }}DTO {{ entity.entity_var }}DTO = new {{ entity.entity }}DTO();
            BeanUtils.copyProperties({{ entity.entity_var }}Entity, {{ entity.entity_var }}DTO);
            list{{ entity.entity }}DTO.add({{ entity.entity_var }}DTO);
        }
        return list{{ entity.entity }}DTO;
    }
    {%- endif %}
    {% if op.verb == "POST" -%}
    public {{ entity.entity }}DTO add{{ entity.entity }}({{ entity.entity }}DTO {{ entity.entity_var }}DTO) {
        {%- for referenced in entity.many_to_one %}
        if (!{{ referenced.entity_var }}Repository.existsById({{ entity.entity_var }}DTO.getId{{ referenced.entity }}())) {
            LOGGER.info("{{ referenced.entity }} with id: {} not found.", {{ entity.entity_var }}DTO.getId{{ referenced.entity }}());
            throw new ItemNotFoundException(String.format("{{ referenced.entity }} with id: %s not found.", {{ entity.entity_var }}DTO.getId{{ referenced.entity }}()));
        }
        {%- endfor %}
        {{ entity.entity }}Entity {{ entity.entity_var }}Entity = new {{ entity.entity }}Entity();
        BeanUtils.copyProperties({{ entity.entity_var }}DTO, {{ entity.entity_var }}Entity);
        {%- for referenced in entity.many_to_one %}
        {{ entity.entity_var }}Entity.set{{ referenced.entity }}Entity({{ referenced.entity_var }}Repository.findById({{ entity.entity_var }}DTO.getId{{ referenced.entity }}()).orElseThrow());
        {%- endfor %}
        {{ entity.entity }}Entity {{ entity.entity_var }}Added = {{ entity.entity_var }}Repository.save({{ entity.entity_var }}Entity);
        BeanUtils.copyProperties({{ entity.entity_var }}Added, {{ entity.entity_var }}DTO);
        return {{ entity.entity_var }}DTO;
    }
    {%- endif -%}
    {% if op.verb == "PUT" %}
    public {{ entity.entity }}DTO update{{ entity.entity }}(String id, {{ entity.entity }}DTO {{ entity.entity_var }}DTO) {
        try {
            {%- for referenced in entity.many_to_one %}
            if (!{{ referenced.entity_var }}Repository.existsById({{ entity.entity_var }}DTO.getId{{ referenced.entity }}())) {
                LOGGER.info("{{ referenced.entity }} with id: {} not found.", {{ entity.entity_var }}DTO.getId{{ referenced.entity }}());
                throw new ItemNotFoundException(String.format("{{ referenced.entity }} with id: %s not found.", {{ entity.entity_var }}DTO.getId{{ referenced.entity }}()));
            }
            {%- endfor %}
            {{ entity.entity }}Entity {{ entity.entity_var }}Entity = {{ entity.entity_var }}Repository.findById(id).orElseThrow();
            BeanUtils.copyProperties({{ entity.entity_var }}DTO, {{ entity.entity_var }}Entity);
            {{ entity.entity_var }}Entity.setId(id);
            {%- for referenced in entity.many_to_one %}
            {{ entity.entity_var }}Entity.set{{ referenced.entity }}Entity({{ referenced.entity_var }}Repository.findById({{ entity.entity_var }}DTO.getId{{ referenced.entity }}()).orElseThrow());
            {%- endfor %}
            {{ entity.entity_var }}Repository.save({{ entity.entity_var }}Entity);
            {{ entity.entity_var }}DTO.setId(id);
            return {{ entity.entity_var }}DTO;
        } catch (NoSuchElementException ex) {
            LOGGER.info("{{ entity.entity }} with id: {} not found.", id);
            throw new ItemNotFoundException(String.format("{{ entity.entity }} with id: %s not found.", id));
        }
    }
    {%- endif -%}
    {% if op.verb == "DELETE" %}
    public void delete{{ entity.entity }}(String id) {
        try {
            {{ entity.entity }}Entity {{ entity.entity_var }}Entity = {{ entity.entity_var }}Repository.findById(id).orElseThrow();
            {{ entity.entity_var }}Repository.delete({{ entity.entity_var }}Entity);
        } catch (NoSuchElementException ex) {
            LOGGER.info("{{ entity.entity }} with id: {}} not found.", id);
            throw new ItemNotFoundException(String.format("{{ entity.entity }} with id: %s not found.", id));
        }
    }
    {% endif %}
    {%- endfor -%}
    {%- endfor -%}
    {% for method in ai -%}
    {{ method }}
    {%- endfor %}
}
