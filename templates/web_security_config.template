package {{ root_package }}.security.config;

import {{ root_package }}.security.model.SecurityRoles;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class WebSecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final CustomUserDetailService customUserDetailService;
    private final EndpointProperties endpointProperties;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        httpSecurity.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        httpSecurity
                .cors(AbstractHttpConfigurer::disable)
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(sessionManagementCustomizer -> sessionManagementCustomizer
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .formLogin(AbstractHttpConfigurer::disable)
                .securityMatcher("/**")
                .authorizeHttpRequests(registry -> registry
                        .requestMatchers("/").denyAll()
                        .requestMatchers(String.format("/auth%s/login", endpointProperties.getApiV1())).permitAll()
                        {%- for buzz in process %}
                        {%- for domain in buzz.domains %}
                        {%- for op in domain.ops %}
                        {%- if op == "GET" %}
                        .requestMatchers(HttpMethod.GET, String.format("/{{ buzz.buzz|lower }}%s/{{ domain.domain|lower }}/**", endpointProperties.getApiV1())).hasAnyRole(
                                SecurityRoles.ADMIN.name(),
                                SecurityRoles.MANAGER_{{ buzz.buzz|upper }}.name(),
                                SecurityRoles.MANAGER_{{ domain.domain|upper }}.name(),
                                SecurityRoles.GET_{{ domain.domain|upper }}.name()
                        )
                        {%- endif %}
                        {%- if op == "ALL" %}
                        .requestMatchers(HttpMethod.GET, String.format("/{{ buzz.buzz|lower }}%s/{{ domain.domain|lower }}", endpointProperties.getApiV1())).hasAnyRole(
                                SecurityRoles.ADMIN.name(),
                                SecurityRoles.MANAGER_{{ buzz.buzz|upper }}.name(),
                                SecurityRoles.MANAGER_{{ domain.domain|upper }}.name(),
                                SecurityRoles.ALL_{{ domain.domain|upper }}.name()
                        )
                        {%- endif %}
                        {%- if op == "POST" %}
                        .requestMatchers(HttpMethod.POST, String.format("/{{ buzz.buzz|lower }}%s/{{ domain.domain|lower }}", endpointProperties.getApiV1())).hasAnyRole(
                                SecurityRoles.ADMIN.name(),
                                SecurityRoles.MANAGER_{{ buzz.buzz|upper }}.name(),
                                SecurityRoles.MANAGER_{{ domain.domain|upper }}.name(),
                                SecurityRoles.ADD_{{ domain.domain|upper }}.name()
                        )
                        {%- endif %}
                        {%- if op == "PUT" %}
                        .requestMatchers(HttpMethod.PUT, String.format("/{{ buzz.buzz|lower }}%s/{{ domain.domain|lower }}/**", endpointProperties.getApiV1())).hasAnyRole(
                                SecurityRoles.ADMIN.name(),
                                SecurityRoles.MANAGER_{{ buzz.buzz|upper }}.name(),
                                SecurityRoles.MANAGER_{{ domain.domain|upper }}.name(),
                                SecurityRoles.UPDATE_{{ domain.domain|upper }}.name()
                        )
                        {%- endif %}
                        {%- if op == "DELETE" %}
                        .requestMatchers(HttpMethod.DELETE, String.format("/{{ buzz.buzz|lower }}%s/{{ domain.domain|lower }}/**", endpointProperties.getApiV1())).hasAnyRole(
                                SecurityRoles.ADMIN.name(),
                                SecurityRoles.MANAGER_{{ buzz.buzz|upper }}.name(),
                                SecurityRoles.MANAGER_{{ domain.domain|upper }}.name(),
                                SecurityRoles.DELETE_{{ domain.domain|upper }}.name()
                        )
                        {%- endif %}
                        {%- endfor %}
                        {%- endfor %}
                        {%- endfor %}
                        .anyRequest().authenticated()
                );
        return httpSecurity.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity.getSharedObject(AuthenticationManagerBuilder.class)
                .userDetailsService(customUserDetailService)
                .passwordEncoder(passwordEncoder())
                .and().build();
    }
}
